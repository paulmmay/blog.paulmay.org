<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Steven Klise</title>
 <link href="http://stevenklise.com/feed/" rel="self"/>
 <link href="http://stevenklise.com/"/>
 <updated>2011-11-07T15:43:23-05:00</updated>
 <id>http://stevenklise.com/</id>
 <author>
   <name>Recursive</name>
   <email>mail@stevenklise.com</email>
 </author>

 
 <entry>
   <title>Tapper</title>
   <link href="http://stevenklise.com/2011/11/07/tapper"/>
   <updated>2011-11-07T00:00:00-05:00</updated>
   <id>http://stevenklise.com/2011/11/07/tapper</id>
   <content type="html">&lt;iframe src=&quot;http://player.vimeo.com/video/31712426?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;772&quot; height=&quot;434&quot; frameborder=&quot;0&quot; webkitAllowFullScreen allowFullScreen&gt;&lt;/iframe&gt;


&lt;p&gt;Above is a video of the Tapper Sequencer. I made it for the midterm assignment in &lt;a href=&quot;/Musical-Sequence&quot;&gt;Musical Sequence&lt;/a&gt;, it built around an Arduino. I'm happy to say that the Tapper can operate without the aid of a computer and has an 1/8&quot; line-out jack to hook in to whatever sound system you so desire. So the Tapper can be patched in to other effects pedals and amps and stand alone as it's own music maker, though it is very primitive and made of cardboard.&lt;/p&gt;

&lt;p&gt;There are eight steps to the sequence, with the pitch of each set by a potentiometer. The potentiometer is divided invisibly into 12 steps designed so that all the notes are in tune relative to each other. It would be better if each of the 12 steps was demarcated either through using rotary encoders instead of potentiometers or even lines on the case. There is a five-way switch that shifts the notes up and down a total of five octaves.&lt;/p&gt;

&lt;p&gt;The illuminated red button resets the sequence when pressed. So if the 4th note just played and the red button is pressed the next note is the first note. The button above the red one reverses the sequence and while the sequence is running backwards this button is illuminated green. The other two buttons on this pad are currently not working.&lt;/p&gt;

&lt;p&gt;For the final I'm hoping to take this basic design and add a lot more functionality and put the sequencer in a less-cardboard box.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New Site, Now with Comments and RSS</title>
   <link href="http://stevenklise.com/2011/11/04/comments-and-rss"/>
   <updated>2011-11-04T00:00:00-04:00</updated>
   <id>http://stevenklise.com/2011/11/04/comments-and-rss</id>
   <content type="html">&lt;p&gt;After a summer and fall of slowly rewriting this site in Ruby on Rails I realized that a Rails app is overkill. That and that I actually prefer the command line and text editor to any web form.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's a static site generator written in Ruby. No database. No browser interface. I write my posts in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; and have a handful of template files. Running Jekyll (&lt;code&gt;$ jekyll&lt;/code&gt;) combines the templates with the posts and generates html files of the site. Very little server load, simple. Easy to update. No bloat or complicated (and largely unneeded) Wordpress upgrades.&lt;/p&gt;

&lt;p&gt;However I've been disappointed with the lack of detailed documentation for setting up Jekyll. I'll write a bit here how I set up comments and an RSS feed and soon I'll write up creating and deploying a site with Jekyll.&lt;/p&gt;

&lt;h2&gt;Comments with Disqus&lt;/h2&gt;

&lt;p&gt;For commenting, without a database, I had to look for a service that could embed in the page and save the comments on an external database. Embeddable commenting is exactly what &lt;a href=&quot;http://disqus.com&quot;&gt;Disqus&lt;/a&gt; does. Getting Disqus on my site was wonderfully easy and straight forward. I found a tutorial by Douglas Creager who explains the whole process on &lt;a href=&quot;http://dcreager.net/2009/08/07/disqus-comments/&quot;&gt;his own Jekyll site&lt;/a&gt;. So I've got Disqus comments, just like over on my &lt;a href=&quot;http://stevenklise.tumblr.com&quot;&gt;Tumblr&lt;/a&gt;, so please use it.&lt;/p&gt;

&lt;h2&gt;Burning an RSS Feed&lt;/h2&gt;

&lt;p&gt;Even though Google Reader has just crippled itself I still prefer to digest the internet through RSS feeds. With Jekyll's templating building a feed was also easy and took 5 minutes to set up. Five minutes if you remove the time spent chasing character encoding issues from copying posts from Wordpress. I found a &lt;a href=&quot;http://recursive-design.com/blog/2010/09/14/integrating-jekyll-with-feedburner/&quot;&gt;tutorial&lt;/a&gt; from Recursive Design to create a feed and then the one step process of getting that feed hosted on Feedburner.&lt;/p&gt;

&lt;p&gt;Straightforward until the author started talking about nginx rewrites. There is some code offered to make a rewrite but no indication where that code goes. If you're familiar with nginx you probably knew exactly how to do this, but I don't. This site is hosted on Heroku so a rewrite would not be able to be applied directly to the server and would have to be app specific. Jekyll on Heroku requires the &lt;code&gt;rack-jekyll&lt;/code&gt; gem (&lt;a href=&quot;https://github.com/bry4n/rack-jekyll&quot;&gt;documentation on Github&lt;/a&gt;). Running on Rack gives quick access to rewrites in just four lines. Open up &lt;code&gt;config.ru&lt;/code&gt; (a full tutorial on Jekyll is coming soon, on this blog) and add the following lines:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1340812.js?file=config.ru&quot;&gt;&lt;/script&gt;


&lt;p&gt;You'll also need to include &lt;code&gt;rack/rewrite&lt;/code&gt; in your &lt;code&gt;Gemfile&lt;/code&gt; or &lt;code&gt;.gems&lt;/code&gt;. I went with bundler and a &lt;code&gt;Gemfile&lt;/code&gt; which you can see below&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1340812.js?file=Gemfile&quot;&gt;&lt;/script&gt;


&lt;p&gt;So far, blogging with Jekyll has been great.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Final Proposal for Musical Sequence</title>
   <link href="http://stevenklise.com/2011/11/03/sequencer-final-proposal"/>
   <updated>2011-11-03T00:00:00-04:00</updated>
   <id>http://stevenklise.com/2011/11/03/sequencer-final-proposal</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;A quick visual tour of what I have planned for my final project in Musical Sequence&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sklise.s3.amazonaws.com/musical-sequence/IMG_0022.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://sklise.s3.amazonaws.com/musical-sequence/IMG_0023.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://sklise.s3.amazonaws.com/musical-sequence/IMG_0024.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://sklise.s3.amazonaws.com/musical-sequence/IMG_0025.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://sklise.s3.amazonaws.com/musical-sequence/IMG_0026.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://sklise.s3.amazonaws.com/musical-sequence/IMG_0027.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sequencer Teaser</title>
   <link href="http://stevenklise.com/2011/10/31/sequencer-teaser"/>
   <updated>2011-10-31T00:00:00-04:00</updated>
   <id>http://stevenklise.com/2011/10/31/sequencer-teaser</id>
   <content type="html">&lt;p&gt;The midterm assignment for &lt;a href=&quot;/Musical-Sequence&quot;&gt;Musical Sequence&lt;/a&gt; was to build a sequencer using an Arduino. Here are two images of what I built. It's an eight step sequencer currently with a reset button and a reverse mode. No computer is necessary to operate, and there is a 1/8&quot; audio out jack in the back of the box. Video and a more detailed write up are coming.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sklise.s3.amazonaws.com/musical-sequence/midterm-sequencer-outside.jpg&quot; alt=&quot;Outside Sequencer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://sklise.s3.amazonaws.com/musical-sequence/midterm-sequencer-inside.jpg&quot; alt=&quot;Inside Sequencer&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My First Daemon</title>
   <link href="http://stevenklise.com/2011/10/02/my-first-daemon"/>
   <updated>2011-10-02T00:00:00-04:00</updated>
   <id>http://stevenklise.com/2011/10/02/my-first-daemon</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Playing a multiplayer game through Telnet with Sinatra &amp;amp; a daemon.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For our first 'make something' assignment in &lt;a href=&quot;/Understanding-Networks&quot;&gt;Understanding Networks&lt;/a&gt; we were tasked with creating a client for a Telnet server to play a game &lt;a href=&quot;https://github.com/tigoe/MakingThingsTalk2/tree/master/chapter2/project2/MonskiPong&quot;&gt;similar to pong&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The class is taught in PHP, a fact which has convinced me to do (and someday document how to do) everything in Ruby. Of course Telnet is a persistent connection and HTTP is stateless. Trying to maintain a Telnet connection strictly through a browser is then not possible without diving into the world of sockets and streaming.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1257779.js?file=daemon.rb&quot;&gt;&lt;/script&gt;


&lt;p&gt;To maintain the browser as the interface but not have &lt;code&gt;telnet&lt;/code&gt; happening in the HTTP requests I wrote, with the help of resident Greg Borenstein, a daemon. A &lt;a href=&quot;http://en.wikipedia.org/wiki/Daemon_(computing&quot;&gt;daemon&lt;/a&gt;) is a script that runs in the background, constantly. In my case the daemon listens to the database for a new Task. When it finds a new Task it sends the contents of the Task to the Telnet connection and then marks the Task as completed.&lt;/p&gt;

&lt;p&gt;The Task is a DataMapper object.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1257779.js?file=Task.rb&quot;&gt;&lt;/script&gt;


&lt;p&gt;The user clicks an arrow or connection button in the browser and a Task object is created with that command and designated as not being done. In the end this worked well, however the latency between browser to database to daemon to telnet server was only manageable running the app locally.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stevenklise/BallDropClient&quot;&gt;Source on Github&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
</feed>